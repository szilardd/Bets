using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using System.Configuration;
using System.Data.SqlClient;
using Bets.Data.Models;
using System.IO;
using System.Text;
using System.Web.Mvc;
using System.Diagnostics;

namespace Bets.Data
{
	public enum SqlExceptionCode { PrimaryKeyViolation = 2627, Deadlock = 1205, UniqueKeyViolation = 2601 };

	/// <summary>
	/// A generic repository for working with data in the database
	/// </summary>
	/// <typeparam name="TEntity">A POCO that represents an Entity Framework entity</typeparam>
    /// <typeparam name="M">Model</typeparam>
	public class Repository<TEntity, M> : IRepository<TEntity, M> where TEntity : class where M : Model
	{
		private int saveRetryCount = 0;
		private static int MAX_RETRY_COUNT = 5;

		public int UserID { get; set; }
		public bool IsAdmin { get; set; }
		//logs queries generated by Linq2SQL
		private StringBuilder logger = new StringBuilder();

		/// <summary>
		/// The context object for the database
		/// </summary>
		public BetsDataContext Context { get; set; }

		#region "Virtual"
		
		public virtual M GetItem(string id, M model)
		{
			return this.GetItem(Convert.ToInt32(id), model);
		}

		public virtual M GetItem(int id, M model)
		{
			return this.GetItem(id.ToString());
		}

		public virtual M GetItem(string id)
		{
			return this.GetItem(Convert.ToInt32(id));
		}

		public virtual M GetItem(int id)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Returns data for listing
		/// </summary>
		public virtual IQueryable<IModel> GetListingItems(ListingParams<M> listingDataModel)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Returns listing data for lookup
		/// </summary>
		public virtual IQueryable<IModel> GetLookupItems(ListingParams<M> listingDataModel)
		{
			throw new NotImplementedException();
		}

		public virtual ActionStatus SaveItem(M model, DBActionType action)
		{
			throw new NotImplementedException();
		}

		public virtual ActionStatus DeleteItem(M model)
		{
			throw new NotImplementedException();
		}

		#endregion

		public Repository()
		{
            if (DataConfig.IsLiveMode())
            {
                this.Context = this.GetDataContext();
            }
            else
            {
                //profile sql queries
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["Bets"].ConnectionString);

                // wrap the connection with a profiling connection that tracks timings
                this.Context = new BetsDataContext(sqlConn);
            }

            if (DataConfig.EnableTracing())
            {
                this.Context.Log = new TextToTraceWriter { Category = "DatabaseQuery" };
            }
            this.Context.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["CommandTimeout"]);
		}

		public Repository(int userID) : this()
		{
			this.UserID = userID;
		}

		public Repository(Repository<TEntity, M> repo)
		{
			this.Context = repo.Context;
			this.UserID = repo.UserID;
			this.IsAdmin = repo.IsAdmin;
		}

		public Repository(BetsDataContext context, int? userID = null)
		{
			this.Context = context;

			if (userID != null)
				this.UserID = userID.Value;
		}

		public BetsDataContext GetDataContext()
		{
			return new BetsDataContext(ConfigurationManager.ConnectionStrings["Bets"].ConnectionString);
		}

		/// <summary>
		/// Gets all records as an IQueryable
		/// </summary>
		/// <returns>An IQueryable object containing the results of the query</returns>
		public IQueryable<TEntity> GetQuery()
		{
			return this.Context.GetTable<TEntity>();
		}

		/// <summary>
		/// Gets all records as an IQueryable
		/// </summary>
		/// <returns>An IEnumberable object containing the results of the query</returns>
		public IQueryable<TEntity> GetAll()
		{
			return GetQuery().AsQueryable();
		}

		public bool DeleteWithAttach(TEntity entity, bool save = true)
		{
			this.Context.GetTable<TEntity>().Attach(entity);
			this.Context.GetTable<TEntity>().DeleteOnSubmit(entity);

			if (save)
				return (this.Save() == StoredProcResult.Success);

			return true;
		}

		/// <summary>
		/// Adds the specified entity
		/// </summary>
		/// <param name="entity">Entity to add</param>
        /// <param name="save">Whethere to save changes</param>
		public bool Add(TEntity entity, bool save = false)
		{
			this.Context.GetTable<TEntity>().InsertOnSubmit(entity);

			if (save)
				return (this.Save() == StoredProcResult.Success);
			else
				return true;
		}

		/// <summary>
		/// Attaches the specified entity
		/// </summary>
		/// <param name="entity">Entity to attach</param>
		public void Attach<T>(T entity) where T : class
		{
			this.Context.GetTable<T>().Attach(entity);
			this.Context.Refresh(System.Data.Linq.RefreshMode.KeepCurrentValues, entity);
		}

		public void Attach(TEntity entity)
		{
			this.Attach<TEntity>(entity);
		}

		public bool Update(TEntity entity, Action<TEntity> action, bool save = true)
		{
			this.Attach<TEntity>(entity);

			if (action != null)
				action.Invoke(entity);

			if (save)
				return (this.Save() == StoredProcResult.Success);
			return true;
		}

		public bool SaveContext()
		{
			return this.Save() == StoredProcResult.Success;
		}

		///<summary>Saves all context changes</summary>
		public StoredProcResult Save()
		{
			try
			{
				this.Context.SubmitChanges();
			}
			//handle primary key violation by removing already existing records and trying to insert the other models
			//so that if there are multiple models received, the correct ones will still be added to database
			catch (System.Data.SqlClient.SqlException sqlEx)
			{
				SqlExceptionCode exceptionCode = (SqlExceptionCode)Enum.ToObject(typeof(SqlExceptionCode), sqlEx.Number);

				switch (exceptionCode)
				{
					case SqlExceptionCode.Deadlock:
					{
						//avoid infinite recursion if retry count has reached limit
						if (saveRetryCount >= MAX_RETRY_COUNT)
							return StoredProcResult.Error;

						System.Threading.Thread.Sleep(500);
						saveRetryCount++;

                        Logger.Log(sqlEx);

						return this.Save();
					}

					default:
					{
						Logger.Log(sqlEx);
						return StoredProcResult.Error;
					}
				}
			}
			//handle concurrency exceptions
			catch (ChangeConflictException changeConflictEx)
			{
				//avoid infinite recursion if retry count has reached limit
				if (saveRetryCount >= MAX_RETRY_COUNT)
					return StoredProcResult.ErrChanged;

                Logger.Log(changeConflictEx);

				//resolve concurrency issue by retrieving only changed fields into conflicting entities
				//and try saving again
				foreach (ObjectChangeConflict changeConflict in this.Context.ChangeConflicts)
					changeConflict.Resolve(System.Data.Linq.RefreshMode.KeepCurrentValues);

				this.saveRetryCount += 1;

				//retry saving changes
				this.Save();
			}
			catch (Exception ex)
			{
                Logger.Log(ex);
				return StoredProcResult.Error;
			}

			return StoredProcResult.Success;
		}

		protected ActionStatus GetDBResult(StoredProcResult spResult, string spError, DBActionType DBActionType)
		{
			var dbResult = new ActionStatus();
			string action = DBActionType.ToString().ToLower();

			switch (spResult)
			{ 
				case StoredProcResult.ErrChanged        :   dbResult.Message = "Failed to " + action + " because records have been changed since last view. Please reload the page."; break;
				case StoredProcResult.ErrNoRecord       :   dbResult.Message = "Failed to " + action + " because record doesn't exist."; break;
				case StoredProcResult.ErrRecExist       :   dbResult.Message = "Failed to " + action + " because the record already exists."; break;
				case StoredProcResult.ErrRecHasLink     :   dbResult.Message = "Failed to " + action + " because there are records that depend on this one."; break;
				case StoredProcResult.ErrUnknown		:	dbResult.Message = "Failed to " + action + "."; break;
				case StoredProcResult.InvalidPassword	:	dbResult.Message = "Failed to " + action + " because the password is invalid!"; break;
				case StoredProcResult.Success			:	dbResult.Message = "The data was saved successfully!"; dbResult.Success = true; break;
                default                                 :   dbResult.Message = "Failed to " + action + "."; break;
			}

			if (!String.IsNullOrWhiteSpace(spError))
				dbResult.Message += " " + spError;

			return dbResult;
		}

		protected IQueryable<M> GetListingItemsSorted(IQueryable<M> items, ListingSortModel sort)
		{
			if (!String.IsNullOrEmpty(sort.Column))
				items = sort.Asc ? items.OrderBy(sort.Column) : items.OrderByDescending(sort.Column);

			return items;
		}

		#region "Generic Methods"
		
		public ActionStatus AddMultipleIDs<T>(List<int> ids, Func<int, T> getEntity) where T : class
		{
			if (ids == null)
				return new ActionStatus { Success = true };

			Table<T> table = this.Context.GetTable<T>();

			foreach (var id in ids)
				table.InsertOnSubmit(getEntity(id));

			return this.GetDBResult(this.Save(), null, DBActionType.Insert);
		}

		public ActionStatus AddMultipleIDs<T>(List<string> ids, Func<string, T> getEntity) where T : class
		{
			if (ids == null)
				return new ActionStatus { Success = true };

			Table<T> table = this.Context.GetTable<T>();

			foreach (var id in ids)
				table.InsertOnSubmit(getEntity(id));

			return this.GetDBResult(this.Save(), null, DBActionType.Insert);
		}

		protected ActionStatus CallStoredProcedure(DBActionType DBActionType, Func<SPResult> save, Action afterSave = null)
		{
			StoredProcResult spResult;
			string spError = null;

			try
			{
				var dbResult = save.Invoke();
				spError = dbResult.Error;

				if (afterSave != null)
					afterSave.Invoke();

				spResult = (StoredProcResult)Enum.ToObject(typeof(StoredProcResult), dbResult.Result.Value);
			}
			catch (Exception ex)
			{
                Logger.Log(ex);

                spResult = StoredProcResult.ErrUnknown;
			}

			return this.GetDBResult(spResult, spError, DBActionType);
		}

		#endregion

		#region "Utils"

		/// <summary>
		/// Converts char into bool. Use only if the result of the query is a single entity
		/// </summary>
		protected Func<char?, bool?> CharToBool = value => value == null ? (bool?)null : value.Value.ToString().ToUpper() == "Y";

		#endregion
		
	}
}
